Title         : Welcome
Author        : You
Logo          : True

[TITLE]

# Madoko 

Madoko is a fast markdown processor for writing professional articles
with a focus on simplicity and plain text readability.

* Read the [reference manual].
* Explore the upper-right toolbox menu to discover how Markdown works. 
* `Alt-Q` reformats the current paragraph.

Enjoy!

[reference manual]: http://research.microsoft.com/en-us/um/people/daan/madoko/doc/reference.html  "Madoko reference manual"

#Docker
##content
- Docker concepts
- Docker image
- Docker container
- Dockerfile
- network
- volume
- Docker compose
- swarm
- Docker Stack
- Docker Secret
- Docker Cloud
- kubernetes

## Linux 容器 vs VM
**Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。**或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。

由于容器是进程级别的，相比虚拟机有很多优势。

1. 启动快

	容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。

2. 资源占用少

	容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。

3. 体积小

	容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。

总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。

## Docker 是什么？
Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。

## Docker concepts

### Image
Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。

### Container
`镜像（Image）`和`容器（Container）`的关系，就像是面向对象程序设计中的`类` 和 `实例 `一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。

每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。

容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。

按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。

### Repository
镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。

## Docker Image
### 获取镜像
```
  $ docker pull ubuntu:16.04
```

**运行容器**

```
  $ docker run -it --rm 
      ubuntu:16.04 
      bash
```

`-it`：`-i`：交互式操作,`-t`: 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。

`--rm`：这个参数是说容器退出后随之将其删除。

`ubuntu:16.04`：这是指用 ubuntu:16.04 镜像为基础来启动容器。

`bash`：在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。

**查看当前系统版本**

```
  cat /etc/os-release
```

**镜像列表**

```
  $ docker image ls
  $ docker images
```

另外一个需要注意的问题是，docker image ls 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。
由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，
从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，
因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。

**查看占用空间**
```
  $ docker system df
```

**虚悬镜像**

由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <none> 的镜像。这类无标签镜像也被称为 虚悬镜像(dangling image)

查看虚悬镜像

```
  $ docker image ls -f dangling=true
```

删除虚悬镜像
```
  $ docker image prune
```

### 删除镜像
```
  $ docker image rm [选项] <镜像1> [<镜像2> ...]
```
删除仓库名为`redis`的镜像
```
  $ docker image rm $(docker image ls -q redis)
```

### docker commit 构建镜像

建立web服务器demo
```
  $ docker run --name webserver -d -p 80:80 nginx
```

进入容器修改内容
```
  $ docker exec -it webserver bash
  root@3729b97e8226:/# echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html
  root@3729b97e8226:/# exit
  exit
```

查看修改内容
```
  $ docker diff webserver
```

利用commit生成新的镜像
```
  $ docker commit \
    --author "Tao Wang <twang2218@gmail.com>" \
    --message "修改了默认网页" \
    webserver \
    nginx:v2
```
**docker commit的问题**

* 如果仔细观察之前的 docker diff webserver 的结果，你会发现除了真正想要修改的 /usr/share/nginx/html/index.html 文件外，由于命令的执行，还有很多文件被改动或添加了。这还仅仅是最简单的操作，如果是安装软件包、编译构建，那会有大量的无关内容被添加进来，如果不小心清理，将会导致镜像极为臃肿。

* 此外，使用 docker commit 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为黑箱镜像，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。

### Dockerfile 构建镜像
Dcokerfile可以通过From引入基础镜像，在其上进行定制。构建自己的镜像
```
  FROM nginx
  RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html
```

**基本指令**

* FROM

* RUN

  `shell`格式 :`RUN <命令>`
  
  `exec`格式: `RUN ["可执行文件", "参数1", "参数2"]`
  

错误的示范
```
  FROM debian:jessie

  RUN apt-get update
  RUN apt-get install -y gcc libc6-dev make
  RUN wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz"
  RUN mkdir -p /usr/src/redis
  RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1
  RUN make -C /usr/src/redis
  RUN make -C /usr/src/redis install
```
正确的示范
```
  FROM debian:jessie

  RUN buildDeps='gcc libc6-dev make' \
    && apt-get update \
    && apt-get install -y $buildDeps \
    && wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz" \
    && mkdir -p /usr/src/redis \
    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \
    && make -C /usr/src/redis \
    && make -C /usr/src/redis install \
    && rm -rf /var/lib/apt/lists/* \
    && rm redis.tar.gz \
    && rm -r /usr/src/redis \
    && apt-get purge -y --auto-remove $buildDeps
```
构建镜像
```
  $ docker build -t nginx:v3 .
```

* COPY 和 ADD

区别在于ADD可以自动解压压缩文件、从url下载文件（不常用）。

仅仅在需要解压时使用ADD命令，参阅 [Dockerfile best practice]

[Dockerfile best practice]: https://docs.docker.com/develop/develop-images/dockerfile_best-practices/

* CMD

之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。

容器是一个进程，